package vehiclerentalsystem.GUI;

import vehiclerentalsystem.Controllers.VehicleController;
import vehiclerentalsystem.Models.Vehicle;
import vehiclerentalsystem.Utils.WrapLayout;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.swing.*;

public class VehicleManagementForm extends javax.swing.JFrame {

    private Class<?> currentFrame;
    private VehicleController vehicleController;
    private JPanel cardsPanel;
    private JScrollPane cardsScrollPane;
    private JPanel headerPanel;
    private JComboBox<String> brandFilter;
    private JComboBox<String> typeFilter;
    private JSpinner priceFilter;
    private List<Vehicle> allVehicles; // Store all vehicles for filtering
    
    public VehicleManagementForm() {
        vehicleController = new VehicleController();
        initComponents();
        currentFrame = this.getClass();
        setupMainContent();
        loadVehicles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        sidebarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Car Management");
        setPreferredSize(new java.awt.Dimension(1200, 800));

        sidebarPanel.setBackground(new java.awt.Color(0, 0, 0));
        sidebarPanel.setPreferredSize(new java.awt.Dimension(250, 100));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhd\\Downloads\\sport-car (2).png")); // NOI18N
        jLabel1.setText(" CarRental Admin");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 5));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhd\\Downloads\\house (2).png")); // NOI18N
        jButton1.setText(" DashBoard");
        jButton1.setBorderPainted(false);
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhd\\Downloads\\sport-car (2).png")); // NOI18N
        jButton2.setText(" Car Management");
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhd\\Downloads\\accountant (1).png")); // NOI18N
        jButton3.setText(" Employee Managment");
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });


        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\mhd\\Downloads\\settings (1).png")); // NOI18N
        jButton4.setText(" Settings");
        jButton4.setBorderPainted(false);
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidebarPanelLayout = new javax.swing.GroupLayout(sidebarPanel);
        sidebarPanel.setLayout(sidebarPanelLayout);
        sidebarPanelLayout.setHorizontalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(sidebarPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sidebarPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sidebarPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton3)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        sidebarPanelLayout.setVerticalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidebarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 657, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sidebarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );

        pack();
    }

    private void setupMainContent() {
        // Update the main layout to BorderLayout
        getContentPane().setLayout(new BorderLayout());
        
        // Add sidebar to WEST
        getContentPane().add(sidebarPanel, BorderLayout.WEST);
        
        // Create main content panel
        JPanel mainContentPanel = new JPanel(new BorderLayout());
        mainContentPanel.setBackground(new Color(245, 245, 245));
        
        // Create header panel with buttons and filters
        headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(Color.WHITE);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Create buttons panel
        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 15));
        buttonsPanel.setBackground(Color.WHITE);

        // Create and add action buttons to buttonsPanel
        JButton addButton = createHeaderButton("Add Vehicle", new Color(39, 174, 96));
        JButton editButton = createHeaderButton("Edit Vehicle", new Color(52, 152, 219));
        JButton deleteButton = createHeaderButton("Delete Vehicle", new Color(231, 76, 60));
        JButton refreshButton = createHeaderButton("Refresh", new Color(149, 165, 166));
        
        // Add action listeners
        addButton.addActionListener(e -> openAddVehicleDialog());
        editButton.addActionListener(e -> openEditVehicleDialog());
        deleteButton.addActionListener(e -> deleteSelectedVehicle());
        refreshButton.addActionListener(e -> loadVehicles());
        
        // Add buttons to panel
        buttonsPanel.add(addButton);
        buttonsPanel.add(editButton);
        buttonsPanel.add(deleteButton);
        buttonsPanel.add(refreshButton);

        // Create filter panel
        JPanel filterPanel = createFilterPanel();

        // Add both panels to header
        headerPanel.add(buttonsPanel, BorderLayout.NORTH);
        headerPanel.add(filterPanel, BorderLayout.CENTER);
        
        // Create cards panel with WrapLayout for grid-like flow
        cardsPanel = new JPanel(new WrapLayout(FlowLayout.LEFT, 25, 25));
        cardsPanel.setBackground(new Color(245, 245, 245));
        
        // Create scroll pane for cards
        cardsScrollPane = new JScrollPane(cardsPanel);
        cardsScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        cardsScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        cardsScrollPane.setBorder(null);
        cardsScrollPane.getVerticalScrollBar().setUnitIncrement(16); // Smooth scrolling
        
        // Add components to main content
        mainContentPanel.add(headerPanel, BorderLayout.NORTH);
        mainContentPanel.add(cardsScrollPane, BorderLayout.CENTER);
        
        // Add main content to frame
        getContentPane().add(mainContentPanel, BorderLayout.CENTER);
    }

    private JPanel createFilterPanel() {
        JPanel  filterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 10));
        filterPanel.setBackground(Color.WHITE);
        filterPanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

        JLabel brandLabel = new JLabel("Brand:");
        brandFilter = new JComboBox<>();
        brandFilter.setPreferredSize(new Dimension(150, 25));
        brandFilter.addItem("All Brands");

        // Type Filter
        JLabel typeLabel = new JLabel("Type:");
        typeFilter = new JComboBox<>();
        typeFilter.setPreferredSize(new Dimension(150, 25));
        typeFilter.addItem("All Types");

        // Price Filter
        JLabel priceLabel = new JLabel("Max Daily Rate:");
        SpinnerNumberModel priceModel = new SpinnerNumberModel(1000, 0, 10000, 50);
        priceFilter = new JSpinner(priceModel);
        priceFilter.setPreferredSize(new Dimension(100, 25));

        // Apply Filter Button
        JButton applyFilter = createHeaderButton("Apply Filters", new Color(52, 152, 219));

        // Add components to panel
        filterPanel.add(brandLabel);
        filterPanel.add(brandFilter);
        filterPanel.add(Box.createHorizontalStrut(10));
        filterPanel.add(typeLabel);
        filterPanel.add(typeFilter);
        filterPanel.add(Box.createHorizontalStrut(10));
        filterPanel.add(priceLabel);
        filterPanel.add(priceFilter);
        filterPanel.add(Box.createHorizontalStrut(20));
        filterPanel.add(applyFilter);

        // Add action listener to apply filter button
        applyFilter.addActionListener(e -> applyFilters());

        return filterPanel;
    }

    private void updateFilterOptions() {
        // Store selected values
        String selectedBrand = (String) brandFilter.getSelectedItem();
        String selectedType = (String) typeFilter.getSelectedItem();

        // Clear existing items
        brandFilter.removeAllItems();
        typeFilter.removeAllItems();

        // Add default options
        brandFilter.addItem("All Brands");
        typeFilter.addItem("All Types");

        // Create sets to store unique values
        Set<String> brands = new HashSet<>();
        Set<String> types = new HashSet<>();

        // Collect unique values
        for (Vehicle vehicle : allVehicles) {
            if (vehicle.getBrand() != null) {
                brands.add(vehicle.getBrand());
            }
            if (vehicle.getType() != null) {
                types.add(vehicle.getType());
            }
        }

        // Add sorted items to comboboxes
        List<String> sortedBrands = new ArrayList<>(brands);
        List<String> sortedTypes = new ArrayList<>(types);
        Collections.sort(sortedBrands);
        Collections.sort(sortedTypes);

        for (String brand : sortedBrands) {
            brandFilter.addItem(brand);
        }
        for (String type : sortedTypes) {
            typeFilter.addItem(type);
        }

        // Restore selected values if they exist
        if (selectedBrand != null) {
            for (int i = 0; i < brandFilter.getItemCount(); i++) {
                if (brandFilter.getItemAt(i).equals(selectedBrand)) {
                    brandFilter.setSelectedIndex(i);
                    break;
                }
            }
        }

        if (selectedType != null) {
            for (int i = 0; i < typeFilter.getItemCount(); i++) {
                if (typeFilter.getItemAt(i).equals(selectedType)) {
                    typeFilter.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    private void applyFilters() {
        if (allVehicles == null)
            return;

        String selectedBrand = (String) brandFilter.getSelectedItem();
        String selectedType = (String) typeFilter.getSelectedItem();
        double maxPrice = ((Number) priceFilter.getValue()).doubleValue();

        List<Vehicle> filteredVehicles = new ArrayList<>();

        for (Vehicle vehicle : allVehicles) {
            boolean brandMatch = selectedBrand.equals("All Brands") ||
                    (vehicle.getBrand() != null && vehicle.getBrand().equals(selectedBrand));
            boolean typeMatch = selectedType.equals("All Types") ||
                    (vehicle.getType() != null && vehicle.getType().equals(selectedType));
            boolean priceMatch = vehicle.getDailyRate() <= maxPrice;

            if (brandMatch && typeMatch && priceMatch) {
                filteredVehicles.add(vehicle);
            }
        }

        displayFilteredVehicles(filteredVehicles);
    }


    private void displayFilteredVehicles(List<Vehicle> vehicles) {
        cardsPanel.removeAll();

        if (vehicles.isEmpty()) {
            JLabel noVehiclesLabel = new JLabel("No vehicles found matching the current filters.");
            noVehiclesLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            noVehiclesLabel.setForeground(Color.GRAY);
            cardsPanel.add(noVehiclesLabel);
        } else {
            for (Vehicle vehicle : vehicles) {
                CarCard carCard = new CarCard(vehicle);
                cardsPanel.add(carCard);
            }
        }
        cardsPanel.revalidate();
        cardsPanel.repaint();
    }
    
    private JButton createHeaderButton(String text, Color backgroundColor) {
        JButton button = new JButton(text);
        button.setBackground(backgroundColor);
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        button.setPreferredSize(new Dimension(120, 35));
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return button;
    }
    
    private void loadVehicles() {
        // Clear existing cards
        cardsPanel.removeAll();
        
        // Load vehicles from controller
        List<Vehicle> vehicles = vehicleController.loadAllVehicles();
        allVehicles = vehicleController.loadAllVehicles(); // Store all vehicles for filtering
        
        if (vehicles.isEmpty()) {
            JLabel noVehiclesLabel = new JLabel("No vehicles found. Click 'Add Vehicle' to get started.");
            noVehiclesLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            noVehiclesLabel.setForeground(Color.GRAY);
            cardsPanel.add(noVehiclesLabel);
        } else {
            // Create card for each vehicle
            for (Vehicle vehicle : vehicles) {
                CarCard carCard = new CarCard(vehicle);
                // Set preferred size for the card to control its dimensions
                // Card size is now controlled by CarCard component
                cardsPanel.add(carCard);
            }
        }

        
        // update filter options
        updateFilterOptions();

        // Apply initial display (no filters)
        displayFilteredVehicles(allVehicles);

        // Refresh the display
        cardsPanel.revalidate();
        cardsPanel.repaint();
    }
    
    private void showAddVehicleDialog() {
        AddEditVehicleDialog dialog = new AddEditVehicleDialog(this, null, vehicleController);
        dialog.setVisible(true);
        
        // Refresh vehicles after dialog closes
        loadVehicles();
    }
    
    public void openAddVehicleDialog() {
        showAddVehicleDialog();
    }
    
    public void openEditVehicleDialog() {
         CarCard selectedCard = null;
        for (Component comp : cardsPanel.getComponents()) {
            if (comp instanceof CarCard) {
                CarCard card = (CarCard) comp;
                if (card.isSelected()) {
                    selectedCard = card;
                    break;
                }
            }
        }
        
        if (selectedCard == null) {
            JOptionPane.showMessageDialog(this,
                "Please select a vehicle to edit.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to edit this vehicle?\n" +
            "Brand: " + selectedCard.getVehicle().getBrand() + "\n" +
            "Model: " + selectedCard.getVehicle().getModel() + "\n" +
            "Plate: " + selectedCard.getVehicle().getPlateNb(),
            "Confirm Edit",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);

        if(confirm == JOptionPane.YES_OPTION) {
            try {
                // edit the vehicle using controller
                AddEditVehicleDialog dialog= new AddEditVehicleDialog(this, selectedCard.getVehicle(), vehicleController);
                dialog.setVisible(true);
                loadVehicles();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "An error occurred while editing the vehicle: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    public void deleteSelectedVehicle() {
        // Find selected vehicle card
        CarCard selectedCard = null;
        for (Component comp : cardsPanel.getComponents()) {
            if (comp instanceof CarCard) {
                CarCard card = (CarCard) comp;
                if (card.isSelected()) {
                    selectedCard = card;
                    break;
                }
            }
        }
        
        if (selectedCard == null) {
            JOptionPane.showMessageDialog(this,
                "Please select a vehicle to delete.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this vehicle?\n" +
            "Brand: " + selectedCard.getVehicle().getBrand() + "\n" +
            "Model: " + selectedCard.getVehicle().getModel() + "\n" +
            "Plate: " + selectedCard.getVehicle().getPlateNb(),
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
            
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Delete the vehicle using controller
                boolean deleted = vehicleController.removeVehicle(selectedCard.getVehicle().getId());
                if (deleted) {
                    JOptionPane.showMessageDialog(this,
                        "Vehicle deleted successfully!",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                    // Refresh the vehicle list
                    loadVehicles();
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Failed to delete the vehicle. Please try again.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "An error occurred while deleting the vehicle: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // DashBoard Button
        if (currentFrame == AdminDashboard.class){
            return;
        }
        
        this.dispose();
        AdminDashboard dash = new AdminDashboard();
        dash.setVisible(true);
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // Car management button
        if (currentFrame == VehicleManagementForm.class){
            return;
        }
        
        this.dispose();
        VehicleManagementForm car = new VehicleManagementForm();
        car.setVisible(true);
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (currentFrame == EmployeeManagementForm.class){
            return;
        }
        
        this.dispose();
        EmployeeManagementForm employee = new EmployeeManagementForm();
        employee.setVisible(true);
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {


    }



    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel sidebarPanel;
    // End of variables declaration//GEN-END:variables
}